using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Unity.VisualScripting;
using UnityEngine;

public class PlayerDecisionMaking : DecisionMaking
{
    SteeringBehaviour_Manager m_SteeringBehaviours;

    [SerializeField] string m_enemyTag;

    BTree mainTree;

    protected override void Awake()
    {
        base.Awake();

        m_SteeringBehaviours = GetComponent<SteeringBehaviour_Manager>();

        if (!m_SteeringBehaviours)
            Debug.LogError("Object doesn't have a Steering Behaviour Manager attached", this);

        // check if pickup available, if so, gen path to pickup
        BTSequence pickupSequence = new BTSequence(
                new List<BTNode>()
                {
                    new BTPickupAvailable(),
                    new BTGeneratePath()
                }
            );

        // check if enemy detected, if so, attack
        BTSequence attackSequence = new BTSequence(
                new List<BTNode>()
                {
                    new BTEnemyDetection(),
                    new BTAttack()
                }
            );

        // no pickup or enemy detected, gen path to random location
        BTSequence idleSequence = new BTSequence(
                new List<BTNode>()
                {
                    // if enemy, flip to return false - breaks out of idle sequence
                    new BTNot(
                        new BTEnemyDetection()
                    ),
                    new BTGetRandomLocation(),
                    new BTGeneratePath()
                }
            );
        
        // check if pickup available, if so, gen path to pickup, else, gen path to random location
        BTSelector idlePickupSelector = new BTSelector(
            new List<BTNode>()
            {
                pickupSequence,
                idleSequence
            }
        );
        
        // move to target generated by pickup or random location
        BTSequence movementSequence = new BTSequence(
            new List<BTNode>()
            {
                idlePickupSelector,
                new BTMoveToTarget()
            }
        );

        mainTree = 
            new BTree(
                new BTSelector(
                    new List<BTNode>()
                    {
                        attackSequence,
                        movementSequence
                    }
                )
            );

        PickupManager.OnPickUpSpawned += PickupSpawned;
        Pickup.PickUpCollected += PickupCollected;
        
        mainTree.m_Blackboard.AddToDictionary("Cannon", gameObject.GetComponentInChildren<Cannon>());
        mainTree.m_Blackboard.AddToDictionary("Health", gameObject.GetComponent<Health>());
        mainTree.m_Blackboard.AddToDictionary("FleeBehaviour", GetComponent<SteeringBehaviour_Flee>());
        mainTree.m_Blackboard.AddToDictionary("SeekBehaviour", GetComponent<SteeringBehaviour_Seek>());
        mainTree.m_Blackboard.AddToDictionary("DecisionMaking", this);
        mainTree.m_Blackboard.AddToDictionary("SteeringBehaviourManager", m_SteeringBehaviours);
        mainTree.m_Blackboard.AddToDictionary("SelfPos", gameObject.transform);
        mainTree.m_Blackboard.AddToDictionary("EnemyTag", m_enemyTag);
        mainTree.m_Blackboard.AddToDictionary("PickupAvailable", false);
        mainTree.m_Blackboard.AddToDictionary("AStar", new Pathfinding_AStar(false, false, false));
        mainTree.m_Blackboard.AddToDictionary("TargetReached", true);
    }

    public override void update()
    {
        mainTree.Process();
    }

    void PickupSpawned(Transform health, Transform ammo)
    {
        mainTree.m_Blackboard.AddToDictionary("HealthPickup", health);
        mainTree.m_Blackboard.AddToDictionary("AmmoPickup", ammo);
        mainTree.m_Blackboard.AddToDictionary("PickupAvailable", true);
    }

    void PickupCollected()
    {
        mainTree.m_Blackboard.AddToDictionary("PickupAvailable", false);
    }
}
